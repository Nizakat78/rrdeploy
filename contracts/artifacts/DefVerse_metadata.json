{
	"compiler": {
		"version": "0.8.0+commit.c7dfd78e"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_feeWallet",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_router",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					}
				],
				"name": "allowance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "buyFee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "decimals",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "subtractedValue",
						"type": "uint256"
					}
				],
				"name": "decreaseAllowance",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "feeWallet",
				"outputs": [
					{
						"internalType": "address payable",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "getFeeWhitelist",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "_users",
						"type": "address[]"
					}
				],
				"name": "includeToWhiteList",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "addedValue",
						"type": "uint256"
					}
				],
				"name": "increaseAllowance",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "isOpen",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "openTrade",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "sellFee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_buyFee",
						"type": "uint256"
					}
				],
				"name": "setBuyFee",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address payable",
						"name": "_feeWallet",
						"type": "address"
					}
				],
				"name": "setFeeWallet",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "excluded",
						"type": "bool"
					}
				],
				"name": "setFeeWhitelist",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address payable",
						"name": "_safeManager",
						"type": "address"
					}
				],
				"name": "setSafeManager",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_sellFee",
						"type": "uint256"
					}
				],
				"name": "setSellFee",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_swapMax",
						"type": "uint256"
					}
				],
				"name": "setSwapMax",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_swapMin",
						"type": "uint256"
					}
				],
				"name": "setSwapMin",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "swapMax",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "swapMin",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transfer",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "uniswapV2Pair",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "uniswapV2Router",
				"outputs": [
					{
						"internalType": "contract IUniswapV2Router02",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_token",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "withdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "withdrawBNB",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"allowance(address,address)": {
					"details": "See {IERC20-allowance}."
				},
				"approve(address,uint256)": {
					"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
				},
				"balanceOf(address)": {
					"details": "See {IERC20-balanceOf}."
				},
				"decimals()": {
					"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
				},
				"decreaseAllowance(address,uint256)": {
					"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
				},
				"increaseAllowance(address,uint256)": {
					"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
				},
				"name()": {
					"details": "Returns the name of the token."
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"symbol()": {
					"details": "Returns the symbol of the token, usually a shorter version of the name."
				},
				"totalSupply()": {
					"details": "See {IERC20-totalSupply}."
				},
				"transfer(address,uint256)": {
					"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
				},
				"transferFrom(address,address,uint256)": {
					"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/Dverse.sol": "DefVerse"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/Context.sol": {
			"keccak256": "0x18caae9bf95a1dcee7e8e99b19c14cb9465d47e998aa83eff186d4ad58c617c9",
			"license": "MIT",
			"urls": [
				"bzz-raw://070a140c4f7086c42c5224821d656422e0434b2ec09b21d4278d7bf067226656",
				"dweb:/ipfs/QmddkoiEqHithTF77LqeAGkGSFWZsXkHyYhhS5UFydZj3x"
			]
		},
		"contracts/Dverse.sol": {
			"keccak256": "0x1fd874dc3eee8853d233fab722df46da8a4bd30648b2583b5e33812213eb5c96",
			"license": "MIT",
			"urls": [
				"bzz-raw://7e8fad152849ca4a5dfca2ec544e7b25484463e72047ced213e9c7ea25810492",
				"dweb:/ipfs/QmcufPVyJtzW4KtUrV2BkKCV8iQygkmMDwLkq6QBq2xPNo"
			]
		},
		"contracts/ERC20.sol": {
			"keccak256": "0x851e26d42dcc1a3b80fb83b654416103747174f8ae1079ff73429dda6c1c8c77",
			"license": "MIT",
			"urls": [
				"bzz-raw://b938d299ac87c74866ef87eaa34441c6a88db5b8e7416675f934b83f3e8384f7",
				"dweb:/ipfs/QmPenBLG7G9bd5BxGp2kS3km9MaYLj3gzaCqGVTXXbwbjA"
			]
		},
		"contracts/IERC20.sol": {
			"keccak256": "0x526824e7c4ebbd77f2e01d9faf0ea3bb573acfc801b43f2ac8d54a9bf36b7d9c",
			"license": "MIT",
			"urls": [
				"bzz-raw://8d5b5502a559ddee9a7f86d0e7cc0137c5457ed4278cde8b2a831974f8dd788f",
				"dweb:/ipfs/QmVAH1xU4yb2wUZjefn2eKaB3cnLZSciAtguUSUJygWK8Q"
			]
		},
		"contracts/IERC20Metadata.sol": {
			"keccak256": "0xb9696aa37f1ac07d0fa4c0a60492f0d48d279b571ee263ad5c2b9064e8e67c85",
			"license": "MIT",
			"urls": [
				"bzz-raw://d19265528f40426a25b6a24f179885c816bab888f8f8ceaa7705e9c8f71a6379",
				"dweb:/ipfs/QmSbEzmjCgz9kQyia9wSHupQx1Tk4hJSuqYWZszUQ54A1w"
			]
		},
		"contracts/IUniswapV2Factory.sol": {
			"keccak256": "0x190db3fe4d08bc3c51f1dc9eff58390f87c3563890b9bab131bab519a9a88ee3",
			"license": "MIT",
			"urls": [
				"bzz-raw://ec4fdb802e5a8b97f44257a4b5e30c8540810c4565a0b2e8132b0aceec53cdee",
				"dweb:/ipfs/QmbNcu8Si8kAt4FHFdAUAy91PkKNHsZaitF9j8kGJggCZs"
			]
		},
		"contracts/IUniswapV2Router01.sol": {
			"keccak256": "0x6ef679de315e8973b4e57e95f2a7a7dc70a07003a7a62e7fceafa7a803633e3d",
			"license": "MIT",
			"urls": [
				"bzz-raw://982531b129b5760a162ef117b65091da318dea6e0c6f7015e30bbc9498e74a16",
				"dweb:/ipfs/QmccUBEHuoyV3vHfyxdpNrEZzDhPKQj8yo46RXDQsqQ9Ff"
			]
		},
		"contracts/IUniswapV2Router02.sol": {
			"keccak256": "0xd11536f816a3af28818595890e59ab32bea2b2344432c4c7f1281f77df6c574d",
			"license": "MIT",
			"urls": [
				"bzz-raw://c70d7e3b8eb04fa1ff30f0c0a961b27c43fd1ea601cee61a0db2be1c5b6c5e52",
				"dweb:/ipfs/QmcRgeQ69Ax6ZuNkAaWmvFSdRnQrJQBwtBR7mttCNa4Rka"
			]
		},
		"contracts/LockToken.sol": {
			"keccak256": "0x14cf86ec57d86b3e21a47286993fd7dd3e90c0d01b1cd39b2720cb78f88a71b0",
			"license": "MIT",
			"urls": [
				"bzz-raw://e0ce40bb4febdc90928f984fabf0345ed4b1db4564926f69198b526a0efa377a",
				"dweb:/ipfs/QmNWDMw7nuatWLM6iV7pd9y3Z8tBmhMt99EeFUM4otYMnt"
			]
		},
		"contracts/Ownable.sol": {
			"keccak256": "0x04a54347e4e3ff9be5ce6f46484f0b214b8f444421631ab4a4ad68612c0850cf",
			"license": "MIT",
			"urls": [
				"bzz-raw://501aca9bb67ed7b98e687530a3c63ab07f73c2694848920bf9232899be5292d9",
				"dweb:/ipfs/QmSuBMhLDfBCftbKkujB3CMvzFwBVvqi8gwKU2tZvfjAnw"
			]
		},
		"contracts/SafeToken.sol": {
			"keccak256": "0x22a5e0e53dad8c8226a9f7f4d5229aa60a72518a463609dbd006006459ea7d1b",
			"license": "MIT",
			"urls": [
				"bzz-raw://ff895efa2df2750c7302c2ff0732a89bcc57bec2684f9a24cf11aa1c2440beb2",
				"dweb:/ipfs/QmYnwMpLBiZLVQcPtdbotsvaQ56ZeTm9jA1z7bUeZ2Jmfq"
			]
		}
	},
	"version": 1
}